<%- contentFor('styles') %>
<%- contentFor('scripts') %>
<script>
var socket = io();
let currentPixel
let user
let pixelData
let coolDown = 30
let currentUser
let previousColor
let enterPress =false


const generateTitle = () => {
  return `<h1 h1 id="pixel-canvas-title" class="text-center">Pixel Canvas</h1>
  <div  class="d-flex mb-1">
    <div class="info-spacer"></div>
    <div>
      <p id="pixel-canvas-intro" class="d-flex text-center justify-content-center">Welcome to the pixel canvas. You will be partaking in a social experiment along with everyone else in the world. Below is a canvas where you can change the individual colors of each pixel to your own liking. Each time a pixel color is set, it cannot be changed to another color for 30 mins. You are free to do whatever you want here. Have fun!</p>
    </div>
    <div class="info-spacer"></div>
  </div>

  `
}

const generateCanvas = ({ isLoading, pixels }) => {
  if (isLoading) return `<div class="text-center mb-3">Loading...</div>`
  return `
    <div id="pixel-taken-modal" class="modal" tabindex="-1" role="dialog">
    </div>

    <div id="sign-in-modal" class="modal" tabindex="-1" role="dialog">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
          <div class="modal-header mb-0 p-3">
            <h4 class="modal-title-signin">Sign in required</h4>
            <button id="modal-close" type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span class="text-center" aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-footer">
            <button id="sign-in" type="button" class="btn btn-primary" onclick="window.location.href='/auth/login';">
              log in
            </button>
            <button id="modal-close-bottom" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>


    <div id="color-modal" class="modal" tabindex="-1" role="dialog">
      <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content d-flex text-center justify-content-center">
          <div class="modal-header">
            <h4 class="modal-title">Paint this Pixel!</h4>
            <button id="modal-close" type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>

          <div id="color-modal-info" class="modal-body">
          </div>

          <div id='color-modal-color' class="container d-flex justify-content-center">
              <label id="choose-your-pixel" for="colorpicker">Choose your pixel color:</label>
              <input type="color" id="colorpicker" value="${previousColor ? previousColor : "#000000" }">
          </div>

          <div class="modal-footer">
            <button id="confirm" type="button" class="btn btn-primary">Confirm</button>
            <button id="modal-close-bottom" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <div id="pixel-wrapper">
      ${
        pixels.map((row, y) => {
          return `
          <div
            class="row justify-content-center align-items-center flex-nowrap mx-auto"
            style="width: ${row.length * 9}px
            border: .5px solid #C8C8C8;
            "
          >
            ${row.map((col, x) => {
            return `
                  <div
                    id="x-${x}-y-${y}"
                    data-x="${x}"
                    data-y="${y}"
                    data-toggle="popover"
                    data-placement="top"
                    data-content="information"
                    data-bs-container="body"
                    data-bs-toggle="popover"
                    data-bs-placement="top"
                    data-bs-content="pixel information"
                    class="pixel-col p-0"
                    style="
                      background-color: ${col.RGB};
                      width: 9px;
                      height: 9px;
                      border: .1px solid #C8C8C8;
                    "
                  >
                  </div>
                `
          }).join('')
            }
          </div>
        `
        }).join('')
      }
    </div>
  `
}

const generatePage = async(info) => {
  const $page = $('#pages-Pixel-index')
  const $title = generateTitle(info)
  const $canvas = generateCanvas(info)
  $page.html('').append($title).append($canvas)
  //console.log('page generated')
}

const getPixels = async() => {
  //console.log('page updated')
  axios({
        method: 'GET',
        url: '/api/pixels'
      }).then((resp) => {
        var pixels = resp.data.pixel
        //console.log(pixels)
        generatePage({pixels})
      })
}

const getMyProfileIndex = () => {
  axios({
    method: 'GET',
    url: '/api/my/profile',
  }).then((resp) => {
    user = { user: resp.data }
    myUser = { user: resp.data }
    currentUser = { user: resp.data }
    console.log("signed in")
  }).catch(() => {
    user = null
    console.log("please sign in")
  })
}

const getPixel = async (xCoord, yCoord) => {
  await axios({
    method: 'GET',
    url: '/api/pixel',
    params : {
      x: xCoord,
      y: yCoord
    }
  }).then((resp) => {
    //console.log('pixel found')
    //console.log(resp.data)
    pixelData = resp.data
  }).catch(() => {
    console.log('pixel not found')
  })
}

const handlePixelClick = (e) => {
  e.preventDefault()
  const $elem = $(e.currentTarget)
  currentPixel = $elem
  const xCoord = $elem.data('x')
  const yCoord = $elem.data('y')
  //console.log(xCoord)
  //console.log(yCoord)

  const $pixelInfo = (pixelData) => {
    return`
    <p id="previous-color" >Previous color:</p>
    <div class="d-flex justify-content-center align-items-center">
    <div id="color-box" class="d-inline-flex" style="border: .1px solid #C8C8C8; background-color:${pixelData.RGB}; Width:30px; height:30px"></div>
    <button id="color-copy" type="button" class="btn btn-primary ml-1" data-color="${pixelData.RGB}"">Copy color</button>
    </div>
    `
  }

  const $pixelTakenInfo = (pixelData, timeLeft) => {
    return `
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content d-flex text-center justify-content-center"">
            <div class="modal-header">
              <h4 class="modal-title-occupied">This pixel is occupied!</h4>
              <button id="modal-close" type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>

            <div id="pixel-taken-body" class="modal-body">
                <p class="mb-2 mt-2"> Pixel created: <b id="user">${pixelData.user.username}</b> </p>
            </div>

            <div>
              <div class="d-flex justify-content-center align-items-center text-center">
                <p id="pixel-color" class="mb-0">Pixel color:</p>
                <div id="color-box" class="d-inline-flex" style="border: .1px solid #C8C8C8; background-color:${pixelData.RGB}; Width:30px;height:30px"></div>
                <button id="color-copy" type="button" class="btn btn-primary" data-color="${pixelData.RGB}"">Copy color</button>
              </div>
              <p class="mb-2 mt-2" id="unlocks-in">Unlocks in: <b id="timeleft">${timeLeft} mins</b> </p>
            </div>

            <div class="modal-footer p-1">
              <button id="modal-close-bottom" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>

          </div>
        </div>
    `
  }

  const pixelPress = async() => {
    await getPixel(xCoord, yCoord)
    //console.log(pixelData.x)
    //console.log(pixelData.y)
    //console.log(pixelData.timeStamp)
    const timeCreated = (Math.floor((new Date(pixelData.timeStamp)) / 1000))/60
    const currentTime = (Math.floor((Date.now()) / 1000))/60
    //console.log(timeCreated)
    //console.log(currentTime)
    //console.log(Math.floor(currentTime-timeCreated))
    //console.log(user.user.username)

      if (user.user.username === 'admin') {
        console.log('admin overwrite')
        const $pixelColorModal = $("#color-modal-info")
        //console.log(pixelData.RGB)
        $pixelColorModal.html('').append($pixelInfo(pixelData))
        $("#color-modal").modal('show')
        $("#color-modal").keyup(function (event) {
        })
      }


    if (currentTime - timeCreated > coolDown) {
      if (user) {
        const $pixelColorModal = $("#color-modal-info")
        //console.log(pixelData.RGB)
        $pixelColorModal.html('').append($pixelInfo(pixelData))
        $("#color-modal").modal('show')
        enterPress = true
        $("#color-modal").keyup(function (event) {
          if (enterPress == true) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
              console.log('enter')
              enterPress=false
              handleModalConfirm(e)
            }
          }
        })
      } else {
        $("#sign-in-modal").modal('show')

      }
    }else{
      //console.log(pixelData)
      const timeLeft = Math.floor(coolDown - (currentTime - timeCreated))
      //console.log(timeLeft)
      const $pixelTakenModal = $('#pixel-taken-modal')
      $pixelTakenModal.html('').append($pixelTakenInfo(pixelData,timeLeft))

      $("#pixel-taken-modal").modal('show')
    }
  }
  pixelPress(xCoord, yCoord)
}

const handleModalClose = (e) => {
  console.log('closed')
  //console.log($(e.target).parents(".modal"))
  //$("#color-modal").modal('hide')
  $(e.target).parents(".modal").modal('hide')
}

const handleModalConfirm = (e) => {
  e.preventDefault()
  //console.log('confirm')
  const colorHex = $('#colorpicker')
  const color = colorHex.val()
  previousColor = color
  //console.log(currentPixel)
  //console.log(currentUser)
  //console.log(pixelData)
  //console.log(color)
  socket.emit('pixel update', pixelData, color, currentUser)
  $("#color-modal").modal('hide')
  pixelPainted(pixelData, color, currentUser)
  console.log('confirmed')
}

const pixelPainted = async(pixelData, color, currentUser) => {
  console.log('pixel painted successfully')
  await getPixel(pixelData.x, pixelData.y)
  //console.log(pixelData)
  const updateTime = ((Math.floor((Date.now()) / 1000)) / 60)
  const unlockTime = ((Math.floor((Date.now()) / 1000)) / 60)+ coolDown
  //console.log(unlockTime)
  timeLeft = Math.floor(unlockTime - updateTime)
  //console.log('time left:', timeLeft)

  $pixelUpdatedInfo = (sessionUser, timeLeft, color) => {
    return `
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content d-flex text-center justify-content-center">
      <div class="modal-header">
        <h4 class="modal-title-painted">Pixel successfully painted!</h4>
        <button id="modal-close" type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div id="pixel-taken-body" class="modal-body">
        <p class="mb-2 mt-2"> Pixel created by: <b id="user">${sessionUser}</b> </p>
        <div class="d-flex justify-content-center align-items-center text-center">
          <p class="mb-0">Color painted:</p>
            <div id="color-box" class="d-inline-flex" style="border: .1px solid #C8C8C8; background-color:${color}; Width:30px; height:30px"></div>
        </div>
        <p class="mt-2">Unlocks in: <b id="timeleft">${timeLeft} mins </b> </p>
      <div class="modal-footer p-1">
        <button id="modal-close-bottom" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
  `
  }

  //const pixelOwner = pixelData.user.username
  const sessionUser = myUser.user.username
  //console.log('pixelOwner:', pixelOwner, 'myUser', sessionUser)
  const $pixelTakenModal = $('#pixel-taken-modal')
  $pixelTakenModal.html('').append($pixelUpdatedInfo(sessionUser, timeLeft, color))
  $("#pixel-taken-modal").modal('show')

  //console.log('modal added')
}


const copyColorClick = (e) => {
  e.preventDefault()
  //console.log('copied')
  const $elem = $(e.currentTarget)
  console.log($elem)
  console.log($elem.data('color'))
  previousColor = $elem.data('color')
  const $pixelColor = $("#color-modal-color")

  const $currentColor = () => {
    return `
    <label for="colorpicker">Choose pixel color:</label>
    <input type="color" id="colorpicker" value="${previousColor ? previousColor : "#000000"}">
    `
  }

  $pixelColor.html('').append($currentColor())
}

const MouseHover = (e) => {
  //data-bs-content
  $('.pixel-col').hover(
    function () {
      //const xCoord = $(this).data('x')
      //const yCoord = $(this).data('y')
      //getPixel(xCoord, yCoord)
      //console.log(pixelData)

      //$(this).popover('show')
      $(this).css("border", '3px solid #D2042D')

    },
    function () {
      //$(this).popover('hide')
      $(this).css("border", '.1px solid #C8C8C8')
    }
  )
}

socket.on('pixel updated', async (pixelData, color, UserTrigger, timeStamp) => {
  //console.log(pixelData)
  //console.log($(`#x-${pixelData.x}-y-${pixelData.y}`))
  //$(currentPixel).css("background-color", colorHex.val())
  const $updatingPixel = $(`#x-${pixelData.x}-y-${pixelData.y}`)
  $updatingPixel.css("background-color", color)
})

$(document).ready(() => {
  generatePage({ isLoading: true })
  getPixels()
  getMyProfileIndex()
  $('#pages-Pixel-index').on('click', '.pixel-col', handlePixelClick)
  $('#pages-Pixel-index').on('click', '#modal-close', handleModalClose)
  $('#pages-Pixel-index').on('click', '#modal-close-bottom', handleModalClose)
  $('#pages-Pixel-index').on('click', '#confirm', handleModalConfirm)
  $('#pages-Pixel-index').on('click', '#color-copy', copyColorClick)
  $('#pages-Pixel-index').on('mouseover', '.pixel-col', MouseHover)
  //$('#pages-Pixel-index').on('mouseover', '#navbar-username', MouseHoverUsername)
})

</script>

<%- contentFor('body') %>
<div id="pages-Pixel-index" class="mb-6"></div>
